"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[387],{3:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),s=n(5710),a=["components"],c={sidebar_position:2},l="Client API",p={unversionedId:"webserver/client",id:"webserver/client",title:"Client API",description:"You can find the OpenAPI / swagger definition here",source:"@site/docs/webserver/client.mdx",sourceDirName:"webserver",slug:"/webserver/client",permalink:"/carp/docs/webserver/client",draft:!1,editUrl:"https://github.com/dcSpark/carp/docs/webserver/client.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Core pillars",permalink:"/carp/docs/webserver/intro"}},d={},u=[{value:"You can find the OpenAPI / swagger definition here",id:"you-can-find-the-openapi--swagger-definition-here",level:3},{value:"Example",id:"example",level:2}],m={toc:u};function f(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"client-api"},"Client API"),(0,o.kt)("h3",{id:"you-can-find-the-openapi--swagger-definition-here"},"You can find the OpenAPI / swagger definition ",(0,o.kt)("a",{parentName:"h3",href:"/openapi"},"here")),(0,o.kt)("p",null,"TBD: NPM link"),(0,o.kt)("p",null,"We provide a Typescript client for ease of use from Javascript, we also provide an OpenAPI / Swagger definition. This helps with"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Writing clients for other languages"),(0,o.kt)("li",{parentName:"ul"},"Having human-readable documentation for the API")),(0,o.kt)("p",null,"If you want to write your own client, you can refer to the ",(0,o.kt)("a",{parentName:"p",href:"/carp/docs/indexer/sql"},"sql format")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Here is an example where we get the transaction history for an address"),(0,o.kt)(s.Z,{language:"typescript",title:"example.ts",showLineNumbers:!0,mdxType:"CodeBlock"},'import { Routes } from "@dcspark/carp-client/shared/routes";\nimport { paginatedTransactionHistory } from "@dcspark/carp-client/client/src/paginated";\nimport { query } from "@dcspark/carp-client/client/src/index";\nimport cml from "@dcspark/cardano-multiplatform-lib-nodejs";\nimport type { TransactionHistoryResponse } from "@dcspark/carp-client/shared/models/TransactionHistory";\n\nconst urlBase = "http://localhost:3000";\n\nasync function getHistoryForAddress(\n  bech32Address: string\n): Promise<TransactionHistoryResponse> {\n  const bestBlock = await query(urlBase, Routes.blockLatest, {\n    // the higher you make this, the less you have to worry about rollbacks\n    // but also the slower your app will react to new transactions by the user\n    // you can look into projects like Cardano multiverse-rs to optimize this number\n    offset: 3,\n  });\n\n  const wasmAddr = cml.Address.from_bech32(bech32Address);\n  const paymentKey = wasmAddr.as_base()?.payment_cred();\n  if (paymentKey == null) throw new Error();\n\n  const stakingKey = wasmAddr.as_base()?.stake_cred();\n  if (stakingKey == null) throw new Error();\n\n  const result = await paginatedTransactionHistory(urlBase, {\n    addresses: [\n      Buffer.from(paymentKey.to_bytes()).toString("hex"),\n      Buffer.from(stakingKey.to_bytes()).toString("hex"),\n    ],\n    untilBlock: bestBlock.block.hash,\n  });\n  return result;\n}\n'))}f.isMDXComponent=!0}}]);